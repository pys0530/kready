---
- name: 공통 시스템 설정
  hosts: all
  become: yes
  tasks:
    - name: /etc/hosts에 로컬 hosts 파일 내용 추가
      blockinfile:
        path: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED HOSTS ENTRIES"
        block: "{{ lookup('file', 'hosts') }}"

    - name: SELinux 비활성화를 위한 grubby 커널 인수 업데이트
      command: grubby --update-kernel ALL --args selinux=0

    - name: CRB 저장소 활성화
      command: dnf config-manager --set-enabled crb

    - name: epel-release 설치
      dnf:
        name: epel-release
        state: present

    - name: 시스템 업데이트
      command: dnf update -y

    - name: net-tools, bash-completion, git 설치
      dnf:
        name:
          - net-tools
          - bash-completion
          - git
        state: present

    - name: /etc/modules-load.d/k8s.conf 파일 생성
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        owner: root
        group: root
        mode: '0644'

    - name: overlay 모듈 로드
      command: modprobe overlay

    - name: br_netfilter 모듈 로드
      command: modprobe br_netfilter

    - name: /etc/sysctl.d/k8s.conf 파일 생성
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        owner: root
        group: root
        mode: '0644'

    - name: sysctl 설정 적용
      command: sysctl --system

    - name: sysctl - net.ipv4.ip_forward 값 확인
      shell: sysctl -a | grep net.ipv4.ip_forward
      register: ipv4_forward
      changed_when: false

    - name: sysctl - net.bridge.bridge-nf 값 확인
      shell: sysctl -a | grep net.bridge.bridge-nf
      register: bridge_nf
      changed_when: false

    - name: firewalld 비활성화 및 중지
      service:
        name: firewalld
        state: stopped
        enabled: no
      ignore_errors: yes

    - name: 스왑(off) 비활성화
      command: swapoff -a

    - name: /etc/fstab 파일에서 swap 항목 주석 처리
      lineinfile:
        path: /etc/fstab
        regexp: '(^.*\sswap\s.*$)'
        line: '# \1'
        backrefs: yes

    - name: 타임존 Asia/Seoul로 설정
      timezone:
        name: Asia/Seoul

    - name: /etc/chrony.conf 파일 내 pool 라인 주석 처리
      replace:
        path: /etc/chrony.conf
        regexp: '^(pool.*)$'
        replace: '#\1'
        backup: yes

    - name: /etc/chrony.conf 파일 내 server 라인 주석 처리
      replace:
        path: /etc/chrony.conf
        regexp: '^(server.*)$'
        replace: '#\1'
        backup: yes

    - name: chrony 서버 추가 블록 삽입
      blockinfile:
        path: /etc/chrony.conf
        marker: "# {mark} ANSIBLE MANAGED CHRONY SERVERS"
        block: |
          server time.bora.net
          server time.google.com

    - name: chronyd 재시작
      systemd:
        name: chronyd
        state: restarted

    - name: centos-release-okd-4.16 설치
      dnf:
        name: centos-release-okd-4.16
        state: present

    - name: CentOS-OKD-4.16 repo 파일에서 enabled=1 을 enabled=0 으로 변경
      replace:
        path: /etc/yum.repos.d/CentOS-OKD-4.16.repo
        regexp: 'enabled\s*=\s*1'
        replace: 'enabled=0'
        backup: yes

    - name: cri-o 설치 (centos-okd-4.16 repo 사용)
      dnf:
        name: cri-o
        state: present
        enablerepo: centos-okd-4.16

    - name: crio 서비스 활성화 및 시작
      service:
        name: crio
        state: started
        enabled: yes

    - name: /etc/yum.repos.d/kubernetes.repo 파일 생성
      copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.32/rpm/
          enabled=0
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.32/rpm/repodata/repomd.xml.key
        owner: root
        group: root
        mode: '0644'

    - name: kubeadm, kubectl, kubelet, cri-tools, iproute-tc, container-selinux 설치 (kubernetes repo 사용)
      dnf:
        name:
          - kubeadm
          - kubectl
          - kubelet
          - cri-tools
          - iproute-tc
          - container-selinux
        state: present
        enablerepo: kubernetes

    - name: kubelet 서비스 활성화 및 시작
      service:
        name: kubelet
        state: started
        enabled: yes

- name: Kubernetes 컨트롤 플레인 초기화 및 인증서 아카이브 생성 (master-1에서 실행)
  hosts: master-1
  become: yes
  tasks:
    - name: kubeadm init 실행 (이미 초기화 되어 있으면 건너뜀)
      command: >
        kubeadm init
        --control-plane-endpoint={{ kube_control_plane_endpoint }}
        --apiserver-advertise-address={{ kube_apiserver_advertise_address }}
        --service-cidr={{ kube_service_cidr }}
        --pod-network-cidr={{ kube_pod_network_cidr }}
        --cri-socket={{ kube_cri_socket }}
      args:
        creates: /etc/kubernetes/admin.conf

    - name: 사용자 .kube 디렉토리 생성
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_id | default('root') }}"
        group: "{{ ansible_user_gid | default('root') }}"

    - name: admin.conf를 사용자 kube config로 복사
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id | default('root') }}"
        group: "{{ ansible_user_gid | default('root') }}"
        mode: '0644'
        remote_src: yes

    - name: /etc/kubernetes/pki 디렉토리에서 인증서 아카이브 생성
      command: tar czvf kube-certs.tar.gz sa.pub sa.key ca.crt ca.key front-proxy-ca.crt front-proxy-ca.key etcd/ca.crt etcd/ca.key
      args:
        chdir: /etc/kubernetes/pki
        creates: /etc/kubernetes/pki/kube-certs.tar.gz

    - name: 생성된 인증서 아카이브를 컨트롤 노드로 가져오기
      fetch:
        src: /etc/kubernetes/pki/kube-certs.tar.gz
        dest: /tmp/kube-certs.tar.gz
        flat: yes

- name: master-etc에서 master-1의 kube config 복사 및 설정
  hosts: master-etc
  become: yes
  tasks:
    - name: /root/.kube 디렉토리 생성
      file:
        path: "/root/.kube"
        state: directory
        mode: '0755'
        owner: "root"
        group: "root"

    - name: master-1에서 kube config 파일 가져오기
      fetch:
        src: "/root/.kube/config"
        dest: "/tmp/kube-config-master1"
        flat: yes
      delegate_to: "{{ groups['master-1'][0] }}"

    - name: kube config 파일 복사 및 권한/소유자 설정
      copy:
        src: "/tmp/kube-config-master1"
        dest: "/root/.kube/config"
        mode: '0644'
        owner: "root"
        group: "root"

    - name: .bashrc에 KUBECONFIG 환경 변수 추가
      lineinfile:
        path: "/root/.bashrc"
        line: 'export KUBECONFIG="$HOME/.kube/config"'
        create: yes
        state: present

- name: master-1 및 master-etc에서 helm 설치 스크립트 및 환경 설정
  hosts: master-1:master-etc
  become: yes
  tasks:
    - name: get_helm.sh 스크립트 다운로드
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'

    - name: Helm 사전 설치 확인 (PATH 환경변수 포함)
      command: which helm
      register: helm_check
      ignore_errors: yes
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Helm 설치 (PATH 환경변수 포함)
      command: /tmp/get_helm.sh
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
      when: helm_check.rc != 0

    - name: clear alias 추가 (.bashrc)
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bashrc"
        line: 'alias c=clear'
        create: yes
        state: present

    - name: kubectl completion bash 소스 라인 추가 (.bashrc)
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bashrc"
        line: 'source <(kubectl completion bash)'
        create: yes
        state: present

    - name: kubectl alias 추가 (.bashrc)
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bashrc"
        line: 'alias k=kubectl'
        create: yes
        state: present

    - name: kubectl completion alias 추가 (.bashrc)
      lineinfile:
        dest: "{{ ansible_env.HOME }}/.bashrc"
        line: 'complete -o default -F __start_kubectl k'
        create: yes
        state: present

    - name: .bashrc 재적용 (필요 시)
      shell: source {{ ansible_env.HOME }}/.bashrc
      args:
        executable: /bin/bash

- name: Helm install cilium (master-1에서만 실행)
  hosts: master-1
  become: yes
  tasks:
    - name: Add Cilium Helm repository
      command: helm repo add cilium https://helm.cilium.io/
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Update Helm repositories
      command: helm repo update
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

    - name: Install Cilium with Helm
      command: helm install cilium cilium/cilium --namespace kube-system
      environment:
        PATH: "/usr/local/bin:{{ ansible_env.PATH }}"

- name: master-etc로 인증서 배포 및 압축 해제
  hosts: master-etc
  become: yes
  tasks:
    - name: /etc/kubernetes/pki 디렉토리 생성
      file:
        path: /etc/kubernetes/pki
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: 컨트롤 노드에서 가져온 인증서 아카이브를 대상 호스트로 복사
      copy:
        src: /tmp/kube-certs.tar.gz
        dest: /etc/kubernetes/pki/kube-certs.tar.gz

    - name: 인증서 아카이브 압축 해제
      unarchive:
        src: /etc/kubernetes/pki/kube-certs.tar.gz
        dest: /etc/kubernetes/pki/
        remote_src: yes

- name: master-1에서 kubeadm token 생성 및 join 명령어 등록
  hosts: master-1
  become: yes
  gather_facts: false
  tasks:
    - name: kubeadm token 생성 및 join 명령어 출력
      command: kubeadm token create --print-join-command
      register: join_command_result
      run_once: true

    - name: join 명령어를 전역 변수로 설정
      set_fact:
        kube_join_command: "{{ join_command_result.stdout }}"
      run_once: true

- name: worker 호스트에서 join 명령 실행
  hosts: worker
  become: yes
  tasks:
    - name: kubeadm join이 이미 실행되었는지 확인
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: kubeadm join 명령 실행 (worker)
      command: "{{ hostvars[groups['master-1'][0]].kube_join_command }}"
      when: not kubelet_conf.stat.exists
      register: join_worker_result

- name: master-etc 호스트에서 --control-plane 옵션 포함 join 명령 실행
  hosts: master-etc
  become: yes
  tasks:
    - name: kubeadm join이 이미 실행되었는지 확인
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: kubeadm join 명령 실행 (master-etc, --control-plane 추가)
      command: "{{ hostvars[groups['master-1'][0]].kube_join_command }} --control-plane"
      when: not kubelet_conf.stat.exists
      register: join_master_result

- name: Update PATH in /root/.bashrc
  hosts: all
  become: yes
  tasks:
    - name: Ensure PATH is set correctly in /root/.bashrc
      lineinfile:
        path: /root/.bashrc
        line: 'export PATH=$PATH:/usr/local/bin'
        create: yes
      register: bashrc_updated

    - name: Apply changes by sourcing /root/.bashrc
      shell: source /root/.bashrc
      when: bashrc_updated.changed
